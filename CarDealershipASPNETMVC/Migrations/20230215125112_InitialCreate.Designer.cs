// <auto-generated />
using System;
using CarDealershipASPNETMVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarDealershipASPNETMVC.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230215125112_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryId");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EntryDate");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ManagerId");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SexId")
                        .HasColumnType("int")
                        .HasColumnName("SexId");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("SexId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f8f19bd4-fba0-4a81-8ad1-4ecef9060dc6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b524824-796c-4671-8044-5c3a4de92d89",
                            CountryId = 32,
                            DateOfBirth = new DateTime(1982, 9, 8, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Email = "admin@car.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            HouseNumber = "HouseNumber8",
                            LastName = "AppAdmin",
                            Location = "Wien",
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN@CAR.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOichy/adhcdhduthO2GBw9uAABGdWFLhvkXKMBYbedrFn9d0/RHA7q5+JbW3T0CbA==",
                            PhoneNumberConfirmed = false,
                            PostalCode = 1010,
                            SecurityStamp = "28556286-840f-4427-8960-3274880ef1f7",
                            SexId = 1,
                            Street = "Street",
                            TwoFactorEnabled = false,
                            UserName = "admin@car.com"
                        },
                        new
                        {
                            Id = "9e8b5c56-46f5-4ffd-828f-aacf965d17d5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "abdc3825-881e-49c1-9582-a8e5622f1930",
                            CountryId = 32,
                            DateOfBirth = new DateTime(2000, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Email = "user@car.com",
                            EmailConfirmed = true,
                            FirstName = "User",
                            HouseNumber = "HouseNumber10",
                            LastName = "AppUser",
                            Location = "Wien",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER@CAR.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDcdL+ZtnAJOlfJWsX4+gEoIRAsDFrXHa8JIwLnzhwWM0fpEl5DkNv1WXFw8qiey+A==",
                            PhoneNumberConfirmed = false,
                            PostalCode = 1010,
                            SecurityStamp = "4f914fe9-56c1-49ef-bde2-c6255cc01f61",
                            SexId = 1,
                            Street = "Street",
                            TwoFactorEnabled = false,
                            UserName = "user@car.com"
                        },
                        new
                        {
                            Id = "96ddf804-0261-4d83-821a-c87c37cc87f7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b0f329ad-9586-4667-8ba0-cda1c77c9ab1",
                            CountryId = 32,
                            DateOfBirth = new DateTime(1990, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Email = "manager@car.com",
                            EmailConfirmed = true,
                            FirstName = "Manager",
                            HouseNumber = "HouseNumber2",
                            LastName = "AppManager",
                            Location = "Wien",
                            LockoutEnabled = false,
                            NormalizedUserName = "MANAGER@CAR.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEO2W9ITnJh4tx9pd/12Kr1XEohQ+Cp0WEMNGWONwisSU6zQfP/dooYiB7Bt9nOfDog==",
                            PhoneNumberConfirmed = false,
                            PostalCode = 1010,
                            SecurityStamp = "dcae1578-9311-49a1-a3f5-55eddc47eb0b",
                            SexId = 1,
                            Street = "Street",
                            TwoFactorEnabled = false,
                            UserName = "manager@car.com"
                        },
                        new
                        {
                            Id = "02e69598-6679-4435-8b99-1bea500c87de",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d253c242-1b6b-44c6-9e74-02a162a8868f",
                            CountryId = 32,
                            DateOfBirth = new DateTime(2003, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Email = "salasperson@car.com",
                            EmailConfirmed = true,
                            FirstName = "Salasperson",
                            HouseNumber = "HouseNumber50",
                            LastName = "AppSalasperson",
                            Location = "Wien",
                            LockoutEnabled = false,
                            NormalizedUserName = "SALESPERSON@CAR.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFo6b1eZDj53kroFWFmikefM3x4hUJv/2zkKq3n3FlPrUfyT/f/bayYpO/SOVn9YNA==",
                            PhoneNumberConfirmed = false,
                            PostalCode = 1010,
                            SecurityStamp = "e2f5b9ec-b2e3-4361-a8b7-282b41e21b50",
                            SexId = 1,
                            Street = "Street",
                            TwoFactorEnabled = false,
                            UserName = "salasperson@car.com"
                        });
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.ApplicationUser_SpokenLangues", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SpokenLanguesId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SpokenLanguesId");

                    b.HasIndex("SpokenLanguesId");

                    b.ToTable("ApplicationUser_Spokens");

                    b.HasData(
                        new
                        {
                            UserId = "f8f19bd4-fba0-4a81-8ad1-4ecef9060dc6",
                            SpokenLanguesId = 3
                        },
                        new
                        {
                            UserId = "f8f19bd4-fba0-4a81-8ad1-4ecef9060dc6",
                            SpokenLanguesId = 4
                        },
                        new
                        {
                            UserId = "f8f19bd4-fba0-4a81-8ad1-4ecef9060dc6",
                            SpokenLanguesId = 6
                        },
                        new
                        {
                            UserId = "f8f19bd4-fba0-4a81-8ad1-4ecef9060dc6",
                            SpokenLanguesId = 12
                        });
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.CarAccessoriesModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Brand");

                    b.Property<int>("CAPGId")
                        .HasColumnType("int")
                        .HasColumnName("CAPGId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Description");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastUpdateTime");

                    b.Property<int>("MinimumStockQuantity")
                        .HasColumnType("int")
                        .HasColumnName("MinimumStockQuantity");

                    b.Property<double>("NetSellingPrice")
                        .HasColumnType("float")
                        .HasColumnName("NetSellingPrice");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhotoPath");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ProductName");

                    b.Property<int>("QuantityOfStock")
                        .HasColumnType("int")
                        .HasColumnName("QuantityOfStock");

                    b.Property<double>("SalesUnit")
                        .HasColumnType("float")
                        .HasColumnName("SalesUnit");

                    b.Property<int>("UnitNameId")
                        .HasColumnType("int")
                        .HasColumnName("UnitNameId");

                    b.Property<int>("Version")
                        .HasColumnType("int")
                        .HasColumnName("Version");

                    b.HasKey("Id");

                    b.HasIndex("CAPGId");

                    b.HasIndex("UnitNameId");

                    b.ToTable("CarAccessories");

                    b.HasData(
                        new
                        {
                            Id = "64e7589a-1896-4a46-8f1e-1b0a2df99bf3",
                            Brand = "LIONSTRONG",
                            CAPGId = 1,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Sitzbezüge Sitzschoner für Autositze, Sitzbezug Werkstatt Auto, universal Autositzschoner, Sitzbezüge, wasserdichter Stoff (Polyester)",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(576),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 16.989999999999998,
                            ProductName = "Sitzbezüge",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "c066708c-cdf9-4f54-bedd-3b25fc380b5f",
                            Brand = "M MOTOS",
                            CAPGId = 1,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Kofferraumwanne Kofferraummatte passt für Audi Q3 II, unterer Kofferraumboden 2018 Verbessern Sie Ihren Reisekomfort mit Antirutschmatte Auto",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(596),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 49.990000000000002,
                            ProductName = "Gepäckraumschalen",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "5383182a-22fc-48de-832f-bee542d93f2a",
                            Brand = "AEG",
                            CAPGId = 1,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "AEG Automotive Thermoelektrische Kühl- und Warmhaltebox KK 14 Liter, 12 Volt für Auto",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(611),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 62.840000000000003,
                            ProductName = "Kühlbox",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "a7b673e2-1e9b-4f39-8ebf-feb64ed0ef6f",
                            Brand = "Oneil",
                            CAPGId = 1,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Upgrade4cars Lenkradbezug Rot Schwarz Leder Optik Lenkradschutz in Universal Größe 37-39 cm Lenkradhülle für Sommer & Winter Autozubehör Innenraum",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(626),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 29.989999999999998,
                            ProductName = "Lenkradschutz",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "203e6a60-58d9-4bc4-b8cc-06950c5f61db",
                            Brand = "Oneil",
                            CAPGId = 1,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Lenkschloss",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(640),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 89.0,
                            ProductName = "Lenkschloss",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "36c1e9cb-6028-4a7e-b8ca-182a7cd519bb",
                            Brand = "Oneil",
                            CAPGId = 1,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Kühltasche",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(655),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 17.989999999999998,
                            ProductName = "Kühltasche",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "f20a0ca8-628e-4d04-a70a-bc0fc3932319",
                            Brand = "Oneil",
                            CAPGId = 1,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Auto-Staubsauger",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(670),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 49.990000000000002,
                            ProductName = "Auto-Staubsauger",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "1f480591-8089-4e94-8695-c5bf6cbfa391",
                            Brand = "Oneil",
                            CAPGId = 1,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Windschutzscheibendecke",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(689),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 18.989999999999998,
                            ProductName = "Windschutzscheibendecke",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "f68aefc7-2a2b-4b37-a58c-7d4f4407757e",
                            Brand = "Oneil",
                            CAPGId = 1,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Upgrade4cars Autositzschutz",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(704),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 22.969999999999999,
                            ProductName = "Autositzschutz",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "8ccf1c73-c102-4f12-981e-231b8a83b293",
                            Brand = "Oneil",
                            CAPGId = 1,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Upgrade4cars Nackenkissen",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(719),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 29.949999999999999,
                            ProductName = "Nackenkissen",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "89917765-defc-40a1-9257-bcd2b280a3a1",
                            Brand = "Oneil",
                            CAPGId = 1,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Upgrade4cars Anti-Rutsch-Armaturenbrett",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(805),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 10.99,
                            ProductName = "Anti-Rutsch-Armaturenbrett",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "4d2fa68f-2c3d-4ef1-b300-4ba541511617",
                            Brand = "Oneil",
                            CAPGId = 1,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Upgrade4cars Beheizter Sitzbezug",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(823),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 37.990000000000002,
                            ProductName = "Beheizter Sitzbezug",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "a3660e25-0ab3-4018-9d21-025c5b9a36bb",
                            Brand = "Oneil",
                            CAPGId = 1,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Upgrade4cars Armlehne Autozubehör Innenraum",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(837),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 20.5,
                            ProductName = "Armlehne",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "861b7af2-d136-4328-9682-91a0a22196cd",
                            Brand = "Oneil",
                            CAPGId = 1,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Upgrade4cars Fahrradträger",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(852),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 278.99000000000001,
                            ProductName = "Fahrradträger",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "c48b26e0-84d1-4a1c-915c-e38ae4fe6349",
                            Brand = "Oneil",
                            CAPGId = 1,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Upgrade4cars Kindersitz Autozubehör Innenraum",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(867),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 142.99000000000001,
                            ProductName = "Kindersitz",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "4a0f71d2-0610-442b-8ca9-051b0f5abb1d",
                            Brand = "GENMAG",
                            CAPGId = 1,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Nummernschildhalterung Autozubehör",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(886),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 23.989999999999998,
                            ProductName = "Nummernschildhalterung",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "3b497f56-957a-4a50-82ef-4d731282a62b",
                            Brand = "LINDENMANN",
                            CAPGId = 2,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Hirschleder Schal Autozubehör Innenraum",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(902),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 20.899999999999999,
                            ProductName = "Hirschleder Schal",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "8c96f81e-65c5-422e-bce4-1b2f15154b52",
                            Brand = "GLART",
                            CAPGId = 2,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Mikrofasertücher Autozubehör",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(918),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 14.99,
                            ProductName = "Mikrofasertücher",
                            QuantityOfStock = 1000000,
                            SalesUnit = 5.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "62cbc78c-fc64-400d-ad5a-a02e4e5328f4",
                            Brand = "SONAX",
                            CAPGId = 2,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Schwämme",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(933),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 8.9499999999999993,
                            ProductName = "Schwämme",
                            QuantityOfStock = 1000000,
                            SalesUnit = 5.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "8ae22845-d424-430d-ae07-40e3037528b7",
                            Brand = "Febreze",
                            CAPGId = 2,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Auto Lufterfrischer Autozubehör Innenraum",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(947),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 59.950000000000003,
                            ProductName = "Auto Lufterfrischer",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "3f2d0472-770f-4ebd-adeb-f27576371553",
                            Brand = "LICARGO",
                            CAPGId = 2,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Auto Luftentfeuchter Autozubehör Innenraum",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(961),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 19.989999999999998,
                            ProductName = "Auto Luftentfeuchter",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "dc6442f1-9cf8-470f-9dfe-d85b0c93bfd8",
                            Brand = "SONAX",
                            CAPGId = 2,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Reinigungsbürste Autozubehör",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(978),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 13.99,
                            ProductName = "Reinigungsbürste",
                            QuantityOfStock = 1000000,
                            SalesUnit = 3.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "035efe2c-732f-4b43-9d59-e6ee29bd10f6",
                            Brand = "COFIT",
                            CAPGId = 2,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Gummiwischer Autozubehör",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(992),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 32.990000000000002,
                            ProductName = "Gummiwischer",
                            QuantityOfStock = 1000000,
                            SalesUnit = 2.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "7a77d02d-39ac-4f2f-b14f-b764c6e874f4",
                            Brand = "BOSCH",
                            CAPGId = 2,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Hochdruckreiniger Autozubehör",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1011),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 78.819999999999993,
                            ProductName = "Hochdruckreiniger",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "00cdffaf-265c-4d61-97aa-4ae013ed8b79",
                            Brand = "SONAX",
                            CAPGId = 2,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Händedesinfektionsmittel",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1025),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 20.899999999999999,
                            ProductName = "Händedesinfektionsmittel",
                            QuantityOfStock = 1000000,
                            SalesUnit = 0.5,
                            UnitNameId = 2,
                            Version = 1
                        },
                        new
                        {
                            Id = "81eec0b4-9282-4614-a9a4-dfcec84fe08b",
                            Brand = "Tork",
                            CAPGId = 2,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Papierhandtuch Autozubehör",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1040),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 41.950000000000003,
                            ProductName = "Papierhandtuch",
                            QuantityOfStock = 1000000,
                            SalesUnit = 8.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "838b6baa-a60a-46e1-8d4e-1ef7dc338259",
                            Brand = "WillingHeart",
                            CAPGId = 2,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Autowaschbürste Autozubehör",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1056),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 13.99,
                            ProductName = "Autowaschbürste",
                            QuantityOfStock = 1000000,
                            SalesUnit = 2.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "8084ee05-f8df-410d-9fb8-dc895fa105d8",
                            Brand = "LICARGO",
                            CAPGId = 2,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Felgenreinigungsbürste Autozubehör",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1072),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 19.989999999999998,
                            ProductName = "Felgenreinigungsbürste",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "ec6bde56-18a7-4143-a680-67decd0f35ba",
                            Brand = "SONAX",
                            CAPGId = 2,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Reinigungstücher Autozubehör",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1086),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 8.3200000000000003,
                            ProductName = "Reinigungstücher",
                            QuantityOfStock = 1000000,
                            SalesUnit = 3.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "5353d541-550c-48b7-ac37-a3d346d019b4",
                            Brand = "LICARGO",
                            CAPGId = 3,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Glasreiniger Autozubehör",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1100),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 29.989999999999998,
                            ProductName = "Glasreiniger",
                            QuantityOfStock = 1000000,
                            SalesUnit = 0.69999999999999996,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "d2569ea8-be38-40ef-a746-e9391e7c90dd",
                            Brand = "Oneil",
                            CAPGId = 3,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Eiskratzer Autozubehör",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1115),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 11.98,
                            ProductName = "Eiskratzer",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "6ecc866a-0a07-408b-9364-9891d4f19968",
                            Brand = "MICHELIN",
                            CAPGId = 3,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Schneeketten Autozubehör",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1133),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 107.98999999999999,
                            ProductName = "Schneeketten",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "ce77726c-bf43-4306-a3c9-8ec0cb72b9f0",
                            Brand = "NABIYE",
                            CAPGId = 3,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Dachbox Autozubehör",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1148),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 76.489999999999995,
                            ProductName = "Dachbox",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "b599db4d-5818-47e3-8b12-6698e0da45a5",
                            Brand = "Brubaker",
                            CAPGId = 3,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Skitasche Autozubehör",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1163),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 8.3200000000000003,
                            ProductName = "Skitasche",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "0dcbed03-f220-4c75-989a-51131bf90219",
                            Brand = "Uvex",
                            CAPGId = 4,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Arbeitshandschuhe",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1177),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 19.98,
                            ProductName = "Arbeitshandschuhe",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "04fb6bc8-8e3d-4dcf-b657-73503e5fc627",
                            Brand = "Oneil",
                            CAPGId = 4,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Erste-Hilfe-Kit für das Auto",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1191),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 22.989999999999998,
                            ProductName = "Erste-Hilfe-Kit für das Auto",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "f814b368-c01f-40ad-b688-c33824962724",
                            Brand = "Brubaker",
                            CAPGId = 4,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Warndreieck",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1206),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 16.989999999999998,
                            ProductName = "Warndreieck",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "05fda083-82fd-4b80-beba-f54133b8b424",
                            Brand = "Heldenwerk",
                            CAPGId = 4,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Hammer zum Glasbrechen",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1220),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 18.489999999999998,
                            ProductName = "Hammer zum Glasbrechen",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "8a663fc5-75ce-4b4c-a2c5-56fcdda466f8",
                            Brand = "Brandengel",
                            CAPGId = 4,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Feuerlöscher Brandengel",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1235),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 29.390000000000001,
                            ProductName = "Feuerlöscher",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "1f71b5c9-2c9b-4325-8075-49c2f9a08cd7",
                            Brand = "SULWZM",
                            CAPGId = 4,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Warnweste SULWZM",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1253),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 5.9400000000000004,
                            ProductName = "Warnweste",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "02c470bf-952b-4a55-89a1-bea7fcb9647c",
                            Brand = "EBROM",
                            CAPGId = 4,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Bull-Kabel",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1268),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 53.990000000000002,
                            ProductName = "Bull-Kabel",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "0ef4212e-2e7c-4c4d-b38b-271a8745b3b2",
                            Brand = "LE LED",
                            CAPGId = 4,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Taschenlampe",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1285),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 34.990000000000002,
                            ProductName = "Taschenlampe",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "f4e263d4-480e-44e5-9841-acaaf452060f",
                            Brand = "Tadussi",
                            CAPGId = 4,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Abschleppseil",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1355),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 24.949999999999999,
                            ProductName = "Abschleppseil",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "877ba85c-389b-40b3-8598-ce3f6f84cd69",
                            Brand = "Tubayia",
                            CAPGId = 4,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Hebegurt",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1371),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 19.989999999999998,
                            ProductName = "Hebegurt",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "f34fbd37-0f9b-4920-a783-b6842b34ed88",
                            Brand = "CHARON",
                            CAPGId = 4,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Benzinkanister",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1385),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 64.75,
                            ProductName = "Benzinkanister",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "16bc0bd1-d791-4c65-8de4-a5020f139f61",
                            Brand = "VeoPulse",
                            CAPGId = 5,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Freisprecheinrichtung im Auto",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1400),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 59.969999999999999,
                            ProductName = "Freisprecheinrichtung im Auto",
                            QuantityOfStock = 1000000,
                            SalesUnit = 5.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "1baacb8a-5e78-46b1-bfeb-f114c0045be1",
                            Brand = "Syncwire",
                            CAPGId = 5,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Auto-Ladegerät für Handy",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1414),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 15.99,
                            ProductName = "Auto-Ladegerät für Handy",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "e3dc278e-3498-4b9d-8eff-10e79adbf5cb",
                            Brand = "VANMASS",
                            CAPGId = 5,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Autotelefonhalter",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1433),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 8.3200000000000003,
                            ProductName = "Autotelefonhalter",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "d64f1711-f987-4c8d-92e7-3810cf66f704",
                            Brand = "SolidWork",
                            CAPGId = 6,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Augenschutz",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1448),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 19.989999999999998,
                            ProductName = "Augenschutz",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "f7d4b4f4-801a-467d-8831-1c356b056900",
                            Brand = "Uvex",
                            CAPGId = 6,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Arbeitshosen und Overalls",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1462),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 59.990000000000002,
                            ProductName = "Arbeitshosen und Overalls",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "835fbfc1-c2d0-4ec6-b638-dd2e0279b4ae",
                            Brand = "Senner",
                            CAPGId = 6,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Ohrschutz",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1478),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 15.99,
                            ProductName = "Ohrschutz",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "ed6eef3f-f126-4fed-8243-d4dec9ded2c1",
                            Brand = "Vanderfields",
                            CAPGId = 6,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Staubmasken und Atemschutzmasken",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1493),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 26.890000000000001,
                            ProductName = "Staubmasken und Atemschutzmasken",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "13acb8a3-ae21-4d91-865a-1aace267d678",
                            Brand = "TAERGU",
                            CAPGId = 6,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Sicheres Schuhwerk",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1508),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 49.990000000000002,
                            ProductName = "Sicheres Schuhwerk",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "d2e947e5-fba0-4939-8958-ff12eeb5b9ba",
                            Brand = "ANUNU",
                            CAPGId = 6,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Schutz vor Schweißen Vollmaske mit Filter",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1522),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 45.990000000000002,
                            ProductName = "Schutz vor Schweißen",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "b2e0486f-abdc-4b07-aa65-33bd5d8b463a",
                            Brand = "ADAC",
                            CAPGId = 6,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Arbeitsjacken und -westen",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1537),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 45.990000000000002,
                            ProductName = "Arbeitsjacken und -westen",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "75896f45-f64b-4e96-bbb5-fac02842b116",
                            Brand = "LUCKY",
                            CAPGId = 6,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Arbeitshemden Thermojacke Arbeitshemd Herren Holzfäller Langarm",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1555),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 25.899999999999999,
                            ProductName = "Arbeitshemden",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "3f3d61ea-ff53-4822-9db3-6b19061e5047",
                            Brand = "GMP Tech",
                            CAPGId = 7,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Akustikschaumstoff Selbstklebend Pyramide Matte 200x100 x 8 cm von GMP Tech beauty of sound - Dämmung",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1571),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 79.989999999999995,
                            ProductName = "Schallschutzplatte",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "5d838a5a-5778-47e1-8954-46720de1ace9",
                            Brand = "Pioneer",
                            CAPGId = 7,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Autoradio Pioneer 15,2 cm (6,2 Zoll) 2-DIN-Display mit Bluetooth",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1585),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 164.80000000000001,
                            ProductName = "Autoradio",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "cb087879-587b-4291-a1a7-491fe1543dc6",
                            Brand = "Herdio",
                            CAPGId = 7,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Auto Lautsprecher Herdio 6,5 Zoll Deckenlautsprecher, 160 Watt Bluetooth Einbaulautsprecher, Bündige Montage Sound, für Zuhause Badezimmer Küche Büro mit Full Range Sound",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1600),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 82.989999999999995,
                            ProductName = "Auto Lautsprecher",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "e4d891de-dd4b-4081-a206-8fd5a88588a0",
                            Brand = "Sony",
                            CAPGId = 7,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Auto Verstärker Sony XMN1004 Kfz-Verstärker (1000 Watt)",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1614),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 99.900000000000006,
                            ProductName = "Auto Verstärker",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "8a6cc604-2540-4a07-b475-0aa48ae8f6e0",
                            Brand = "BOOYES",
                            CAPGId = 7,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Multimedia-Haupteinheit BOOYES für Mercedes-Benz W169 W245 B160 B170 B180 B200 W639 Vito Viano W906 Sprinter",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1629),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 289.99000000000001,
                            ProductName = "Multimedia-Haupteinheit",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "f904e173-5fb4-4da6-be9d-975462c99b12",
                            Brand = "JBL",
                            CAPGId = 7,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Subwoofer JBL Stadium 102SSI 10 Zoll Subwoofer Auto Set von Harman Kardon - Leistungsstarke 1350 Watt Kfz Bassbox Autolautsprecher - 30Hz – 175Hz - 250mm mit SSI Impedanzschalter",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1644),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 75.989999999999995,
                            ProductName = "Subwoofer",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "f949c6c9-79cb-46c1-a9e7-c58e310069fb",
                            Brand = "Hama",
                            CAPGId = 7,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Autoradio-Kondensator Hama Hochleistungs-Entstörfilter, 10 Amp",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1658),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 14.99,
                            ProductName = "Autoradio-Kondensator",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 1,
                            Version = 1
                        },
                        new
                        {
                            Id = "5481de3e-2900-42a9-b86d-b79f15463a6a",
                            Brand = "Adapter-Universe",
                            CAPGId = 7,
                            CreationDate = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567),
                            Description = "Autoradio-Kabelsatz Adapter Kabel Auto Radio aktiv System ISO kompatibel mit Audi VW Seat Bose DSP",
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(1676),
                            MinimumStockQuantity = 100000,
                            NetSellingPrice = 15.49,
                            ProductName = "Autoradio-Kabelsatz",
                            QuantityOfStock = 1000000,
                            SalesUnit = 1.0,
                            UnitNameId = 2,
                            Version = 1
                        });
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.CarAccessoriesProductGroupModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CAPGName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CAPGName");

                    b.HasKey("Id");

                    b.ToTable("CarAccessoriesProductGroup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CAPGName = "Autoinnenraum"
                        },
                        new
                        {
                            Id = 2,
                            CAPGName = "Autoreinigungs"
                        },
                        new
                        {
                            Id = 3,
                            CAPGName = "Winter-Autozubehör"
                        },
                        new
                        {
                            Id = 4,
                            CAPGName = "Straßennotfälle und Erste Hilfe"
                        },
                        new
                        {
                            Id = 5,
                            CAPGName = "Zubehör für Autotelefone"
                        },
                        new
                        {
                            Id = 6,
                            CAPGName = "Schutzausrüstung"
                        },
                        new
                        {
                            Id = 7,
                            CAPGName = "Unterhaltung im Auto"
                        });
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.CarAccessoriesUnitModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UnitName");

                    b.HasKey("Id");

                    b.ToTable("CarAccessoriesUnit");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UnitName = "€uro/Stück"
                        },
                        new
                        {
                            Id = 2,
                            UnitName = "€uro/Liter"
                        },
                        new
                        {
                            Id = 3,
                            UnitName = "€uro/Kilogram"
                        });
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.CarModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ChassisNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ChassisNumber");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Color");

                    b.Property<double>("CubicCapacity")
                        .HasColumnType("float")
                        .HasColumnName("CubicCapacity");

                    b.Property<int>("EnginePower")
                        .HasColumnType("int")
                        .HasColumnName("EnginePower");

                    b.Property<int>("FuelId")
                        .HasColumnType("int")
                        .HasColumnName("FuelId");

                    b.Property<int>("GearboxId")
                        .HasColumnType("int")
                        .HasColumnName("GearboxId");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastUpdateTime");

                    b.Property<double>("Mileage")
                        .HasColumnType("float")
                        .HasColumnName("Mileage");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Model");

                    b.Property<double>("NettoPrice")
                        .HasColumnType("float")
                        .HasColumnName("NettoPrice");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfSeats");

                    b.Property<int>("OwnWeight")
                        .HasColumnType("int")
                        .HasColumnName("OwnWeight");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhotoPath");

                    b.Property<bool>("Sold")
                        .HasColumnType("bit")
                        .HasColumnName("Sold");

                    b.Property<DateTime>("YearOfProduction")
                        .HasColumnType("datetime2")
                        .HasColumnName("YearOfProduction");

                    b.HasKey("Id");

                    b.HasIndex("FuelId");

                    b.HasIndex("GearboxId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = "db02ef68-7ae2-49f5-a69c-c562687f6824",
                            ChassisNumber = "XFOW3AT152HhWNS9FF",
                            Color = "silber",
                            CubicCapacity = 1765.0,
                            EnginePower = 85,
                            FuelId = 3,
                            GearboxId = 1,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 563, DateTimeKind.Local).AddTicks(9782),
                            Mileage = 287355.0,
                            Model = "Ford",
                            NettoPrice = 2700.0,
                            NumberOfSeats = 5,
                            OwnWeight = 1270,
                            Sold = false,
                            YearOfProduction = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "8721af74-520b-4ba8-82d8-ca19a385bb43",
                            ChassisNumber = "XFOW3AT612G54WNS9FF",
                            Color = "Weis",
                            CubicCapacity = 1670.0,
                            EnginePower = 75,
                            FuelId = 3,
                            GearboxId = 1,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 563, DateTimeKind.Local).AddTicks(9843),
                            Mileage = 298603.0,
                            Model = "Opel",
                            NettoPrice = 3500.0,
                            NumberOfSeats = 5,
                            OwnWeight = 1170,
                            Sold = false,
                            YearOfProduction = new DateTime(2014, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "845b9a2a-047a-4e71-977b-ec90efc7cb9c",
                            ChassisNumber = "XFOW323EG56692GWNS9FF",
                            Color = "Grün",
                            CubicCapacity = 2002.0,
                            EnginePower = 110,
                            FuelId = 2,
                            GearboxId = 1,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 563, DateTimeKind.Local).AddTicks(9863),
                            Mileage = 350355.0,
                            Model = "Mercedes",
                            NettoPrice = 5100.0,
                            NumberOfSeats = 5,
                            OwnWeight = 1670,
                            Sold = false,
                            YearOfProduction = new DateTime(2012, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "49978b50-50fd-474c-b06d-8129f8a11715",
                            ChassisNumber = "XFOW5GH125GW65NS9FF",
                            Color = "Blau",
                            CubicCapacity = 2500.0,
                            EnginePower = 150,
                            FuelId = 2,
                            GearboxId = 2,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 563, DateTimeKind.Local).AddTicks(9882),
                            Mileage = 156478.0,
                            Model = "BMW",
                            NettoPrice = 6200.0,
                            NumberOfSeats = 5,
                            OwnWeight = 1450,
                            Sold = false,
                            YearOfProduction = new DateTime(2016, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "6ddc5bc8-843a-49ea-af34-a5d96e728687",
                            ChassisNumber = "XFOW3AT12563GWNS9FF",
                            Color = "Gelb",
                            CubicCapacity = 1040.0,
                            EnginePower = 61,
                            FuelId = 3,
                            GearboxId = 1,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 563, DateTimeKind.Local).AddTicks(9899),
                            Mileage = 150355.0,
                            Model = "Suzuki",
                            NettoPrice = 4500.0,
                            NumberOfSeats = 5,
                            OwnWeight = 1120,
                            Sold = false,
                            YearOfProduction = new DateTime(2018, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "588d1664-c8dc-4e1a-ac7c-d92695ab530c",
                            ChassisNumber = "XFOW3AT98573GWNS9FF",
                            Color = "Schwarz",
                            CubicCapacity = 950.0,
                            EnginePower = 54,
                            FuelId = 2,
                            GearboxId = 1,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 563, DateTimeKind.Local).AddTicks(9928),
                            Mileage = 84335.0,
                            Model = "Citoen",
                            NettoPrice = 5300.0,
                            NumberOfSeats = 5,
                            OwnWeight = 988,
                            Sold = false,
                            YearOfProduction = new DateTime(2018, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "b5dc49fe-caac-4888-8968-1c7b906eabb3",
                            ChassisNumber = "XFOW3AT345253GWNS9FF",
                            Color = "Pink",
                            CubicCapacity = 1400.0,
                            EnginePower = 66,
                            FuelId = 3,
                            GearboxId = 2,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 563, DateTimeKind.Local).AddTicks(9947),
                            Mileage = 25355.0,
                            Model = "Volkswagen",
                            NettoPrice = 6250.0,
                            NumberOfSeats = 5,
                            OwnWeight = 972,
                            Sold = false,
                            YearOfProduction = new DateTime(2020, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "d921ed83-cb6b-42ff-9c57-1202e9218876",
                            ChassisNumber = "wf0utk1wsd421",
                            Color = "grau",
                            CubicCapacity = 1783.0,
                            EnginePower = 85,
                            FuelId = 3,
                            GearboxId = 1,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 563, DateTimeKind.Local).AddTicks(9964),
                            Mileage = 289000.0,
                            Model = "Ford",
                            NettoPrice = 1800.0,
                            NumberOfSeats = 5,
                            OwnWeight = 1300,
                            Sold = false,
                            YearOfProduction = new DateTime(2003, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "f8f5182e-d973-4a71-9f3f-a7b911d31a0d",
                            ChassisNumber = "we36xsgvf2656dfs2",
                            Color = "rot",
                            CubicCapacity = 1900.0,
                            EnginePower = 130,
                            FuelId = 1,
                            GearboxId = 3,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 563, DateTimeKind.Local).AddTicks(9980),
                            Mileage = 0.0,
                            Model = "Tesla",
                            NettoPrice = 28000.0,
                            NumberOfSeats = 5,
                            OwnWeight = 1000,
                            Sold = false,
                            YearOfProduction = new DateTime(2019, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "2397edd8-3527-48f2-957f-9697d6d2ed10",
                            ChassisNumber = "vs3daffew8sdf3",
                            Color = "Weis",
                            CubicCapacity = 1420.0,
                            EnginePower = 57,
                            FuelId = 3,
                            GearboxId = 1,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 563, DateTimeKind.Local).AddTicks(9995),
                            Mileage = 214563.0,
                            Model = "Skoda",
                            NettoPrice = 1500.0,
                            NumberOfSeats = 5,
                            OwnWeight = 950,
                            Sold = false,
                            YearOfProduction = new DateTime(2003, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "ba4b951f-a80e-4d13-9aa4-bf04c512d209",
                            ChassisNumber = "wf0utk4wsd4ht21",
                            Color = "grau",
                            CubicCapacity = 1783.0,
                            EnginePower = 85,
                            FuelId = 3,
                            GearboxId = 1,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(10),
                            Mileage = 298003.0,
                            Model = "Ford",
                            NettoPrice = 1850.0,
                            NumberOfSeats = 5,
                            OwnWeight = 1320,
                            Sold = false,
                            YearOfProduction = new DateTime(2004, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "3510fbb0-f75e-49d4-9f7c-e9568ffe8c82",
                            ChassisNumber = "we36xsgvf6556dfseh2",
                            Color = "rot",
                            CubicCapacity = 0.0,
                            EnginePower = 122,
                            FuelId = 1,
                            GearboxId = 3,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(25),
                            Mileage = 298603.0,
                            Model = "Tesla",
                            NettoPrice = 35000.0,
                            NumberOfSeats = 5,
                            OwnWeight = 989,
                            Sold = false,
                            YearOfProduction = new DateTime(2019, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "103c9a80-1a14-47d9-b91a-f702a7289952",
                            ChassisNumber = "vsda6ffertew8sdf3",
                            Color = "weiss",
                            CubicCapacity = 1408.0,
                            EnginePower = 56,
                            FuelId = 3,
                            GearboxId = 1,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(40),
                            Mileage = 214563.0,
                            Model = "Skoda",
                            NettoPrice = 1500.0,
                            NumberOfSeats = 5,
                            OwnWeight = 950,
                            Sold = false,
                            YearOfProduction = new DateTime(2002, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "948ffe3e-e7da-436b-899d-bb0e09ecbd23",
                            ChassisNumber = "srg55dfg721dfs4",
                            Color = "pink",
                            CubicCapacity = 2300.0,
                            EnginePower = 190,
                            FuelId = 2,
                            GearboxId = 1,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(59),
                            Mileage = 50000.0,
                            Model = "Audi",
                            NettoPrice = 5299.0,
                            NumberOfSeats = 3,
                            OwnWeight = 1400,
                            Sold = false,
                            YearOfProduction = new DateTime(2013, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "0367adf0-0e48-4695-9ae0-4789aa12e979",
                            ChassisNumber = "dsfg8ds5fssgfsd65",
                            Color = "schwarz",
                            CubicCapacity = 4000.0,
                            EnginePower = 210,
                            FuelId = 3,
                            GearboxId = 1,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(74),
                            Mileage = 160000.0,
                            Model = "Bmw",
                            NettoPrice = 4500.0,
                            NumberOfSeats = 3,
                            OwnWeight = 1640,
                            Sold = false,
                            YearOfProduction = new DateTime(2010, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "d141c387-794d-42ca-9f63-b47016ecf75e",
                            ChassisNumber = "wf0utkwsd9436",
                            Color = "lila",
                            CubicCapacity = 3726.0,
                            EnginePower = 89,
                            FuelId = 3,
                            GearboxId = 1,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(88),
                            Mileage = 86958.0,
                            Model = "Ford",
                            NettoPrice = 2300.0,
                            NumberOfSeats = 5,
                            OwnWeight = 1550,
                            Sold = false,
                            YearOfProduction = new DateTime(2004, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "f56b5c77-6679-4808-a7e3-61e74a887ac2",
                            ChassisNumber = "we36x10sgvf656dfs7",
                            Color = "grau",
                            CubicCapacity = 0.0,
                            EnginePower = 125,
                            FuelId = 1,
                            GearboxId = 3,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(105),
                            Mileage = 59676.0,
                            Model = "Tesla",
                            NettoPrice = 12999.0,
                            NumberOfSeats = 5,
                            OwnWeight = 1010,
                            Sold = false,
                            YearOfProduction = new DateTime(2017, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "99252330-4b2b-45e8-aaab-766c7e85a6f4",
                            ChassisNumber = "vsda11ffew8sdf8",
                            Color = "hellrot",
                            CubicCapacity = 4693.0,
                            EnginePower = 44,
                            FuelId = 3,
                            GearboxId = 2,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(120),
                            Mileage = 214563.0,
                            Model = "Skoda",
                            NettoPrice = 2399.0,
                            NumberOfSeats = 5,
                            OwnWeight = 1750,
                            Sold = false,
                            YearOfProduction = new DateTime(1997, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "04fabd32-4e33-4c8b-a18a-d665a6f7d069",
                            ChassisNumber = "srg55d12fg21dfs9",
                            Color = "Weiss",
                            CubicCapacity = 5177.0,
                            EnginePower = 120,
                            FuelId = 2,
                            GearboxId = 1,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(202),
                            Mileage = 512833.0,
                            Model = "Audi",
                            NettoPrice = 3000.0,
                            NumberOfSeats = 2,
                            OwnWeight = 1852,
                            Sold = false,
                            YearOfProduction = new DateTime(1999, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "27f361ff-d52b-4efa-9c91-bbef81a2ac24",
                            ChassisNumber = "dsfgd13s5fssgfsd710",
                            Color = "dunkelpink",
                            CubicCapacity = 5660.0,
                            EnginePower = 142,
                            FuelId = 3,
                            GearboxId = 1,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(219),
                            Mileage = 160260.0,
                            Model = "Bmw",
                            NettoPrice = 2800.0,
                            NumberOfSeats = 2,
                            OwnWeight = 1950,
                            Sold = false,
                            YearOfProduction = new DateTime(2005, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "77248bbc-3f4c-4546-b24d-7d6d545ef309",
                            ChassisNumber = "wf0utk14wsd4411",
                            Color = "schwarz",
                            CubicCapacity = 6143.0,
                            EnginePower = 103,
                            FuelId = 3,
                            GearboxId = 1,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(234),
                            Mileage = 267003.0,
                            Model = "Ford",
                            NettoPrice = 4299.0,
                            NumberOfSeats = 2,
                            OwnWeight = 2050,
                            Sold = false,
                            YearOfProduction = new DateTime(2007, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "92296a71-66d3-4f92-957a-1c567aaf9bc5",
                            ChassisNumber = "wf0utkwsd154312",
                            Color = "lila",
                            CubicCapacity = 1795.0,
                            EnginePower = 86,
                            FuelId = 3,
                            GearboxId = 1,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(253),
                            Mileage = 356197.0,
                            Model = "Polo",
                            NettoPrice = 2899.0,
                            NumberOfSeats = 5,
                            OwnWeight = 1350,
                            Sold = false,
                            YearOfProduction = new DateTime(2001, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "c7f82ef6-2593-4410-9761-57b7e3e586b6",
                            ChassisNumber = "we36xsgvf61656dfs13",
                            Color = "grau",
                            CubicCapacity = 1900.0,
                            EnginePower = 132,
                            FuelId = 1,
                            GearboxId = 3,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(268),
                            Mileage = 10591.0,
                            Model = "A4",
                            NettoPrice = 5599.0,
                            NumberOfSeats = 5,
                            OwnWeight = 1315,
                            Sold = false,
                            YearOfProduction = new DateTime(2019, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "de959079-fb80-44b1-a1af-a14e0f07eb44",
                            ChassisNumber = "vsdaf17few8sdf14",
                            Color = "hellrot",
                            CubicCapacity = 1988.0,
                            EnginePower = 95,
                            FuelId = 3,
                            GearboxId = 1,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(284),
                            Mileage = 311713.0,
                            Model = "Vectra",
                            NettoPrice = 2800.0,
                            NumberOfSeats = 3,
                            OwnWeight = 1950,
                            Sold = false,
                            YearOfProduction = new DateTime(2003, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "f79f4961-c661-4918-a2fe-b44d8ce08702",
                            ChassisNumber = "srg55dfg2118dfs15",
                            Color = "weiss",
                            CubicCapacity = 2315.0,
                            EnginePower = 190,
                            FuelId = 2,
                            GearboxId = 1,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(300),
                            Mileage = 120890.0,
                            Model = "Saxo",
                            NettoPrice = 4800.0,
                            NumberOfSeats = 5,
                            OwnWeight = 1406,
                            Sold = false,
                            YearOfProduction = new DateTime(2015, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "e2ffbc03-da80-4f2e-9c8d-bb0ca96876ab",
                            ChassisNumber = "dsfgds195fssgfsd716",
                            Color = "dunkelpink",
                            CubicCapacity = 4133.0,
                            EnginePower = 210,
                            FuelId = 3,
                            GearboxId = 1,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(316),
                            Mileage = 306806.0,
                            Model = "Civic",
                            NettoPrice = 3900.0,
                            NumberOfSeats = 5,
                            OwnWeight = 1620,
                            Sold = false,
                            YearOfProduction = new DateTime(2010, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "731a6aca-758c-4f14-948c-ed10a21362cf",
                            ChassisNumber = "wf0utkw20sd4417",
                            Color = "schwarz",
                            CubicCapacity = 3726.0,
                            EnginePower = 89,
                            FuelId = 3,
                            GearboxId = 1,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(331),
                            Mileage = 204353.0,
                            Model = "Primera",
                            NettoPrice = 6600.0,
                            NumberOfSeats = 2,
                            OwnWeight = 1550,
                            Sold = false,
                            YearOfProduction = new DateTime(2004, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "6525f990-89e3-44e1-81cf-48923b02d0b0",
                            ChassisNumber = "vsdaffew8s22df19",
                            Color = "weiss",
                            CubicCapacity = 4693.0,
                            EnginePower = 44,
                            FuelId = 3,
                            GearboxId = 1,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(346),
                            Mileage = 9944.0,
                            Model = "Passat",
                            NettoPrice = 5900.0,
                            NumberOfSeats = 3,
                            OwnWeight = 1778,
                            Sold = false,
                            YearOfProduction = new DateTime(1997, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "c64a6e17-65d6-42d5-8021-fd236363aaec",
                            ChassisNumber = "srg55dfg2123dfs20",
                            Color = "pink",
                            CubicCapacity = 5196.0,
                            EnginePower = 122,
                            FuelId = 2,
                            GearboxId = 1,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(362),
                            Mileage = 363636.0,
                            Model = "C Class",
                            NettoPrice = 2900.0,
                            NumberOfSeats = 2,
                            OwnWeight = 1860,
                            Sold = false,
                            YearOfProduction = new DateTime(1999, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        },
                        new
                        {
                            Id = "6268b991-2d2f-46a9-ba34-cf357fbd5394",
                            ChassisNumber = "dsfgds5fssgf24sd821",
                            Color = "schwarz",
                            CubicCapacity = 5660.0,
                            EnginePower = 142,
                            FuelId = 3,
                            GearboxId = 1,
                            LastUpdateTime = new DateTime(2023, 2, 15, 13, 51, 11, 564, DateTimeKind.Local).AddTicks(380),
                            Mileage = 309455.0,
                            Model = "Mondeo",
                            NettoPrice = 3999.0,
                            NumberOfSeats = 2,
                            OwnWeight = 1667,
                            Sold = false,
                            YearOfProduction = new DateTime(2005, 10, 20, 15, 9, 12, 123, DateTimeKind.Unspecified).AddTicks(4567)
                        });
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.CountryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CountryName");

                    b.Property<double>("CountryTaxPercentageValue")
                        .HasColumnType("float")
                        .HasColumnName("CountryTaxPercentageValue");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryName = "Albanien",
                            CountryTaxPercentageValue = 20.0
                        },
                        new
                        {
                            Id = 2,
                            CountryName = "Andorra",
                            CountryTaxPercentageValue = 4.5
                        },
                        new
                        {
                            Id = 3,
                            CountryName = "Armenia",
                            CountryTaxPercentageValue = 20.0
                        },
                        new
                        {
                            Id = 4,
                            CountryName = "Belarus",
                            CountryTaxPercentageValue = 20.0
                        },
                        new
                        {
                            Id = 5,
                            CountryName = "Belgien",
                            CountryTaxPercentageValue = 21.0
                        },
                        new
                        {
                            Id = 6,
                            CountryName = "Bosnien und Herzegowina",
                            CountryTaxPercentageValue = 17.0
                        },
                        new
                        {
                            Id = 7,
                            CountryName = "Bulgarien",
                            CountryTaxPercentageValue = 20.0
                        },
                        new
                        {
                            Id = 8,
                            CountryName = "Dänemark",
                            CountryTaxPercentageValue = 25.0
                        },
                        new
                        {
                            Id = 9,
                            CountryName = "Deutschland",
                            CountryTaxPercentageValue = 19.0
                        },
                        new
                        {
                            Id = 10,
                            CountryName = "Estland",
                            CountryTaxPercentageValue = 20.0
                        },
                        new
                        {
                            Id = 11,
                            CountryName = "Finnland",
                            CountryTaxPercentageValue = 24.0
                        },
                        new
                        {
                            Id = 12,
                            CountryName = "Frankreich",
                            CountryTaxPercentageValue = 20.0
                        },
                        new
                        {
                            Id = 13,
                            CountryName = "Georgien",
                            CountryTaxPercentageValue = 18.0
                        },
                        new
                        {
                            Id = 14,
                            CountryName = "Griechenland",
                            CountryTaxPercentageValue = 24.0
                        },
                        new
                        {
                            Id = 15,
                            CountryName = "Irland",
                            CountryTaxPercentageValue = 23.0
                        },
                        new
                        {
                            Id = 16,
                            CountryName = "Island",
                            CountryTaxPercentageValue = 24.0
                        },
                        new
                        {
                            Id = 17,
                            CountryName = "Italien",
                            CountryTaxPercentageValue = 22.0
                        },
                        new
                        {
                            Id = 18,
                            CountryName = "Kasachstan",
                            CountryTaxPercentageValue = 20.0
                        },
                        new
                        {
                            Id = 19,
                            CountryName = "Kosovo",
                            CountryTaxPercentageValue = 20.0
                        },
                        new
                        {
                            Id = 20,
                            CountryName = "Kroatien",
                            CountryTaxPercentageValue = 25.0
                        },
                        new
                        {
                            Id = 21,
                            CountryName = "Lettland",
                            CountryTaxPercentageValue = 21.0
                        },
                        new
                        {
                            Id = 22,
                            CountryName = "Liechtenstein",
                            CountryTaxPercentageValue = 8.0
                        },
                        new
                        {
                            Id = 23,
                            CountryName = "Litauen",
                            CountryTaxPercentageValue = 21.0
                        },
                        new
                        {
                            Id = 24,
                            CountryName = "Luxemburg",
                            CountryTaxPercentageValue = 17.0
                        },
                        new
                        {
                            Id = 25,
                            CountryName = "Malta",
                            CountryTaxPercentageValue = 18.0
                        },
                        new
                        {
                            Id = 26,
                            CountryName = "Moldau",
                            CountryTaxPercentageValue = 20.0
                        },
                        new
                        {
                            Id = 27,
                            CountryName = "Monaco",
                            CountryTaxPercentageValue = 0.0
                        },
                        new
                        {
                            Id = 28,
                            CountryName = "Montenegro",
                            CountryTaxPercentageValue = 21.0
                        },
                        new
                        {
                            Id = 29,
                            CountryName = "Niederlande",
                            CountryTaxPercentageValue = 21.0
                        },
                        new
                        {
                            Id = 30,
                            CountryName = "Nordmazedonien",
                            CountryTaxPercentageValue = 18.0
                        },
                        new
                        {
                            Id = 31,
                            CountryName = "Norwegen",
                            CountryTaxPercentageValue = 25.0
                        },
                        new
                        {
                            Id = 32,
                            CountryName = "Österreich",
                            CountryTaxPercentageValue = 20.0
                        },
                        new
                        {
                            Id = 33,
                            CountryName = "Polen",
                            CountryTaxPercentageValue = 23.0
                        },
                        new
                        {
                            Id = 34,
                            CountryName = "Portugal",
                            CountryTaxPercentageValue = 23.0
                        },
                        new
                        {
                            Id = 35,
                            CountryName = "Rumänien",
                            CountryTaxPercentageValue = 19.0
                        },
                        new
                        {
                            Id = 36,
                            CountryName = "Russland",
                            CountryTaxPercentageValue = 20.0
                        },
                        new
                        {
                            Id = 37,
                            CountryName = "San Marino",
                            CountryTaxPercentageValue = 20.0
                        },
                        new
                        {
                            Id = 38,
                            CountryName = "Schweden",
                            CountryTaxPercentageValue = 25.0
                        },
                        new
                        {
                            Id = 39,
                            CountryName = "Schweiz",
                            CountryTaxPercentageValue = 8.0
                        },
                        new
                        {
                            Id = 40,
                            CountryName = "Serbien",
                            CountryTaxPercentageValue = 20.0
                        },
                        new
                        {
                            Id = 41,
                            CountryName = "Slowakei",
                            CountryTaxPercentageValue = 20.0
                        },
                        new
                        {
                            Id = 42,
                            CountryName = "Slowenien",
                            CountryTaxPercentageValue = 21.0
                        },
                        new
                        {
                            Id = 43,
                            CountryName = "Tschechien",
                            CountryTaxPercentageValue = 21.0
                        },
                        new
                        {
                            Id = 44,
                            CountryName = "Türkei",
                            CountryTaxPercentageValue = 18.0
                        },
                        new
                        {
                            Id = 45,
                            CountryName = "Ukraine",
                            CountryTaxPercentageValue = 20.0
                        },
                        new
                        {
                            Id = 46,
                            CountryName = "Ungarn",
                            CountryTaxPercentageValue = 27.0
                        },
                        new
                        {
                            Id = 47,
                            CountryName = "Vereinigtes Königreich",
                            CountryTaxPercentageValue = 20.0
                        },
                        new
                        {
                            Id = 48,
                            CountryName = "Zypern",
                            CountryTaxPercentageValue = 19.0
                        },
                        new
                        {
                            Id = 49,
                            CountryName = "Andere",
                            CountryTaxPercentageValue = 20.0
                        });
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.FuelModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FuelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FuelName");

                    b.HasKey("Id");

                    b.ToTable("Fuel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FuelName = "Strom"
                        },
                        new
                        {
                            Id = 2,
                            FuelName = "Benzin"
                        },
                        new
                        {
                            Id = 3,
                            FuelName = "Diesel"
                        },
                        new
                        {
                            Id = 4,
                            FuelName = "Erdgas"
                        });
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.GearboxModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GearboxName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("GearboxName");

                    b.HasKey("Id");

                    b.ToTable("Gearbox");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GearboxName = "manual"
                        },
                        new
                        {
                            Id = 2,
                            GearboxName = "automat"
                        },
                        new
                        {
                            Id = 3,
                            GearboxName = "Es gibt keine"
                        });
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.OrderItemModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CarAccessoriesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CarId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("CountryTaxPercentageValue")
                        .HasColumnType("float");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("SaleAmount")
                        .HasColumnType("float");

                    b.Property<double?>("SaleAmountPaid")
                        .HasColumnType("float");

                    b.Property<DateTime?>("SaleTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SalesPersonId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingCartStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarAccessoriesId");

                    b.HasIndex("CarId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("ShoppingCartStatusId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.OrderModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.OrderStatusModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("OrderStatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("OrderStatusName");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderStatusName = "Ausstehend"
                        },
                        new
                        {
                            Id = 2,
                            OrderStatusName = "Verarbeitung"
                        },
                        new
                        {
                            Id = 3,
                            OrderStatusName = "Abgelehnt"
                        },
                        new
                        {
                            Id = 4,
                            OrderStatusName = "Abgeschlossen"
                        });
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.SexModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SexName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SexName");

                    b.HasKey("Id");

                    b.ToTable("Sex");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SexName = "männlich"
                        },
                        new
                        {
                            Id = 2,
                            SexName = "weiblich"
                        },
                        new
                        {
                            Id = 3,
                            SexName = "divers"
                        },
                        new
                        {
                            Id = 4,
                            SexName = "inter"
                        },
                        new
                        {
                            Id = 5,
                            SexName = "offen"
                        },
                        new
                        {
                            Id = 6,
                            SexName = "kein Eintrag"
                        });
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.ShoppingCartItemModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CarAccessoriesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CarId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("SaleAmount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("SaleTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingCartOrderStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingCartStatusId")
                        .HasColumnType("int");

                    b.Property<double>("TaxPercentageValue")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CarAccessoriesId");

                    b.HasIndex("CarId");

                    b.HasIndex("ShoppingCartId");

                    b.HasIndex("ShoppingCartOrderStatusId");

                    b.HasIndex("ShoppingCartStatusId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.ShoppingCartModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.ShoppingCartStatusModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ShoppingCartStatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ShoppingCartStatusName");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCartStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ShoppingCartStatusName = "Im Einkaufswagen"
                        },
                        new
                        {
                            Id = 2,
                            ShoppingCartStatusName = "Bestellt"
                        },
                        new
                        {
                            Id = 3,
                            ShoppingCartStatusName = "Für später gespeichert"
                        },
                        new
                        {
                            Id = 4,
                            ShoppingCartStatusName = "Unterwegs"
                        },
                        new
                        {
                            Id = 5,
                            ShoppingCartStatusName = "Zugestellt"
                        });
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.SpokenLanguesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SpokenLanguesId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SpokenLanguesName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SpokenLanguesName");

                    b.HasKey("Id");

                    b.ToTable("SpokenLangues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SpokenLanguesName = "Albanisch"
                        },
                        new
                        {
                            Id = 2,
                            SpokenLanguesName = "Arabisch"
                        },
                        new
                        {
                            Id = 3,
                            SpokenLanguesName = "Deutsch"
                        },
                        new
                        {
                            Id = 4,
                            SpokenLanguesName = "Englisch"
                        },
                        new
                        {
                            Id = 5,
                            SpokenLanguesName = "Finnisch"
                        },
                        new
                        {
                            Id = 6,
                            SpokenLanguesName = "Französisch"
                        },
                        new
                        {
                            Id = 7,
                            SpokenLanguesName = "Griechisch"
                        },
                        new
                        {
                            Id = 8,
                            SpokenLanguesName = "Italienisch"
                        },
                        new
                        {
                            Id = 9,
                            SpokenLanguesName = "Irisch"
                        },
                        new
                        {
                            Id = 10,
                            SpokenLanguesName = "Niederländisch"
                        },
                        new
                        {
                            Id = 11,
                            SpokenLanguesName = "Ukrainisch"
                        },
                        new
                        {
                            Id = 12,
                            SpokenLanguesName = "Ungarisch"
                        },
                        new
                        {
                            Id = 13,
                            SpokenLanguesName = "Portugiesisch"
                        },
                        new
                        {
                            Id = 14,
                            SpokenLanguesName = "Rumänisch"
                        },
                        new
                        {
                            Id = 15,
                            SpokenLanguesName = "Russisch"
                        },
                        new
                        {
                            Id = 16,
                            SpokenLanguesName = "Schwedisch"
                        },
                        new
                        {
                            Id = 17,
                            SpokenLanguesName = "Slowakisch"
                        },
                        new
                        {
                            Id = 18,
                            SpokenLanguesName = "Slowenisch"
                        },
                        new
                        {
                            Id = 19,
                            SpokenLanguesName = "Weißrussisch"
                        },
                        new
                        {
                            Id = 20,
                            SpokenLanguesName = "Andere Sprache"
                        });
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.StockReplenishmentListModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("OrderedStatus")
                        .HasColumnType("bit");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SRLTimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("StockReplenishmentList");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "79ce4d97-90ed-4e0d-a99a-7d9b491345f5",
                            ConcurrencyStamp = "1ec07faf-dd0a-4dd6-af66-a52cf6f667b5",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "a38f9a3e-7108-4f0e-98af-70d2636d20c6",
                            ConcurrencyStamp = "76984178-7bce-41f8-90f9-add937d0610c",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "1f154c36-490e-4f6b-baea-5d573a237311",
                            ConcurrencyStamp = "42e63dfb-590a-4a62-998b-fbed975b18d0",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "7cc51bee-8c9a-4cdf-ba5b-8bce93d6cede",
                            ConcurrencyStamp = "f526124a-0a70-4f51-8e40-00952e6a6756",
                            Name = "Salasperson",
                            NormalizedName = "SALESPERSON"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Create Role",
                            ClaimValue = "true",
                            UserId = "f8f19bd4-fba0-4a81-8ad1-4ecef9060dc6"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Edit Role",
                            ClaimValue = "true",
                            UserId = "f8f19bd4-fba0-4a81-8ad1-4ecef9060dc6"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Delete Role",
                            ClaimValue = "true",
                            UserId = "f8f19bd4-fba0-4a81-8ad1-4ecef9060dc6"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Create Role",
                            ClaimValue = "true",
                            UserId = "02e69598-6679-4435-8b99-1bea500c87de"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "Create Role",
                            ClaimValue = "true",
                            UserId = "96ddf804-0261-4d83-821a-c87c37cc87f7"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "Edit Role",
                            ClaimValue = "true",
                            UserId = "96ddf804-0261-4d83-821a-c87c37cc87f7"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "Delete Role",
                            ClaimValue = "true",
                            UserId = "96ddf804-0261-4d83-821a-c87c37cc87f7"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f8f19bd4-fba0-4a81-8ad1-4ecef9060dc6",
                            RoleId = "79ce4d97-90ed-4e0d-a99a-7d9b491345f5"
                        },
                        new
                        {
                            UserId = "9e8b5c56-46f5-4ffd-828f-aacf965d17d5",
                            RoleId = "a38f9a3e-7108-4f0e-98af-70d2636d20c6"
                        },
                        new
                        {
                            UserId = "96ddf804-0261-4d83-821a-c87c37cc87f7",
                            RoleId = "1f154c36-490e-4f6b-baea-5d573a237311"
                        },
                        new
                        {
                            UserId = "02e69598-6679-4435-8b99-1bea500c87de",
                            RoleId = "7cc51bee-8c9a-4cdf-ba5b-8bce93d6cede"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.ApplicationUser", b =>
                {
                    b.HasOne("CarDealershipASPNETMVC.Models.CountryModel", "countryModel")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarDealershipASPNETMVC.Models.SexModel", "sexModel")
                        .WithMany()
                        .HasForeignKey("SexId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("countryModel");

                    b.Navigation("sexModel");
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.ApplicationUser_SpokenLangues", b =>
                {
                    b.HasOne("CarDealershipASPNETMVC.Models.SpokenLanguesModel", "SpokenLanguesModel")
                        .WithMany("ApplicationUser_SpokenLangues")
                        .HasForeignKey("SpokenLanguesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarDealershipASPNETMVC.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUser_SpokenLangues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("SpokenLanguesModel");
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.CarAccessoriesModel", b =>
                {
                    b.HasOne("CarDealershipASPNETMVC.Models.CarAccessoriesProductGroupModel", "carAccessoriesProductGroupModel")
                        .WithMany()
                        .HasForeignKey("CAPGId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarDealershipASPNETMVC.Models.CarAccessoriesUnitModel", "carAccessoriesUnitModel")
                        .WithMany()
                        .HasForeignKey("UnitNameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("carAccessoriesProductGroupModel");

                    b.Navigation("carAccessoriesUnitModel");
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.CarModel", b =>
                {
                    b.HasOne("CarDealershipASPNETMVC.Models.FuelModel", "Fuels")
                        .WithMany()
                        .HasForeignKey("FuelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarDealershipASPNETMVC.Models.GearboxModel", "Gearbox")
                        .WithMany()
                        .HasForeignKey("GearboxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fuels");

                    b.Navigation("Gearbox");
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.OrderItemModel", b =>
                {
                    b.HasOne("CarDealershipASPNETMVC.Models.CarAccessoriesModel", "CarAccessories")
                        .WithMany()
                        .HasForeignKey("CarAccessoriesId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CarDealershipASPNETMVC.Models.CarModel", "Cars")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CarDealershipASPNETMVC.Models.OrderModel", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarDealershipASPNETMVC.Models.OrderStatusModel", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarDealershipASPNETMVC.Models.ShoppingCartStatusModel", "ShoppingCartStatus")
                        .WithMany()
                        .HasForeignKey("ShoppingCartStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CarAccessories");

                    b.Navigation("Cars");

                    b.Navigation("Order");

                    b.Navigation("OrderStatus");

                    b.Navigation("ShoppingCartStatus");
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.OrderModel", b =>
                {
                    b.HasOne("CarDealershipASPNETMVC.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.ShoppingCartItemModel", b =>
                {
                    b.HasOne("CarDealershipASPNETMVC.Models.CarAccessoriesModel", "CarAccessories")
                        .WithMany()
                        .HasForeignKey("CarAccessoriesId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CarDealershipASPNETMVC.Models.CarModel", "Cars")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CarDealershipASPNETMVC.Models.ShoppingCartModel", "ShoppingCart")
                        .WithMany("ShoppingCartItem")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarDealershipASPNETMVC.Models.OrderStatusModel", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("ShoppingCartOrderStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarDealershipASPNETMVC.Models.ShoppingCartStatusModel", "ShoppingCartStatus")
                        .WithMany()
                        .HasForeignKey("ShoppingCartStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CarAccessories");

                    b.Navigation("Cars");

                    b.Navigation("OrderStatus");

                    b.Navigation("ShoppingCart");

                    b.Navigation("ShoppingCartStatus");
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.ShoppingCartModel", b =>
                {
                    b.HasOne("CarDealershipASPNETMVC.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.StockReplenishmentListModel", b =>
                {
                    b.HasOne("CarDealershipASPNETMVC.Models.CarAccessoriesModel", "CarAccessories")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CarAccessories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CarDealershipASPNETMVC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CarDealershipASPNETMVC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarDealershipASPNETMVC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CarDealershipASPNETMVC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUser_SpokenLangues");
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.OrderModel", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.ShoppingCartModel", b =>
                {
                    b.Navigation("ShoppingCartItem");
                });

            modelBuilder.Entity("CarDealershipASPNETMVC.Models.SpokenLanguesModel", b =>
                {
                    b.Navigation("ApplicationUser_SpokenLangues");
                });
#pragma warning restore 612, 618
        }
    }
}
